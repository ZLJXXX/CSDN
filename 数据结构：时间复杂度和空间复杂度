数据结构：时间复杂度和空间复杂度

羊驼儿 2020-04-02 16:41:43  14  收藏
展开
衡量一个算法：复杂度：时间复杂度+空间复杂度
算法效率分析：第一种时间效率，第二种是空间效率。时间效率被称为时间复杂度，而空间效率被称为空间复杂度。时间复杂度主要衡量一个算法的运行速度，而空间复杂度主要衡量一个算法需要的额外空间。

时间复杂度
函数中某条语句相对于问题规模N（参数、输入）的数学表达式；

时间复杂度关注的是最差的情况；
时间复杂度没有参考算法运行时间的长短，而是使用基本语句的运行次数
一般情况：
代码中有一个循环----->O(N)—查找元素
代码中有两个嵌套的循环---->O(N^2)—冒泡排序
具体以算法为准
有些算法中：
1.二分查找：O(logN)
2.递归：递归的总次数*每次递归的基本语句运行次数

算法的时间复杂度存在如下几种情况：

最坏情况：任意输入规模的最大运行次数（上界）
平均情况：任意输入规模的期望运行次数
最好情况：任意输入规模的最小运行次数（下界）
例如：在一个长度为N的数组中查找数据X
最好情况：1次找到
最差情况：N次找到
平均状况：N/2次找到

大O渐进表示法
F(N)是一个常数O(1)；
F(N)由多个子项组成，只取最高项；
若最高阶项的系数是不是1，将其改为1；
时间复杂度：计算的是最优平均速率、最差的情况；
常见的时间复杂度计算举例

分析以下程序的时间复杂度（ ）
for(int i=0;i<n;i++)
for(int j=0;j<n;j++)
a[i][j]=i*j;
A、O(n)

B、(n^2)

C、O(nlogn)

D、O(logn)

分析以下函数的时间复杂度（ ）
void fun(int n) {
int i=l;
while(i<=n)
i=i*2;
}
A、O(n)

B、O(n^2)

C、O(nlog2n)

D、O(log2n)
3. 设某算法的递推公式是，T(n)=T(n−1)+n，T(0)=1，T(n)=T(n-1)+n，T(0)=1，T(n)=T(n−1)+n，T(0)=1，则该算法的时间复杂度为（ ）

A、O(n)

== B、O(n^2)==

C、O(nlogn)

D、O(logn)

下面算法的时间复杂度是（ ）
int f ( unsigned int n ) {
if (n == 0 || n==1)
return 1;
else
return n * f(n-1);
}

A、O(n)

B、O(n^2)

C、O(nlogn)

D、O(logn)

给定一个整数sum，从有N个有序元素的数组中寻找元素a，b，使得a+b的结果最接近sum，最快的平均时间复杂度是（ ）
A、O(n)

B、O(n^2)

C、O(nlogn)

D、O(logn)

空间复杂度
当前算法在运行时间方面，创建变量关于问题规模N的数学表达式

常规算法：O(1) 如：冒泡排序、顺序遍历、二分查找

当前算法中是否申请空间
是：空间个数是确定的---->O(1)
否：空间个数和问题规模N（参数、输入)---->O(N)

递归算法:递归的深度*每次递归所需要的空间

常见的时间复杂度计算举例

如果一个函数的栈空间中只定义了一个二维数组a[3][6]，请问这个函数的空间复杂度为（ ）
A、O(n)

B、O(n^2)

C、O(1)

D、O(m*n)

分析以下函数的空间复杂度（ ）
int** fun(int n) {
int ** s = (int **)malloc(n * sizeof(int *));
while(n- -)
s[n] = (int *)malloc(n * sizeof(int));
return s;
}
A、O(n)

B、O(n^2)

C、O(1)

D、O(nlogn)

递归经典例题

long long Factorial(size_t N)
{
	return N < 2 ? N : Factorial(N - 1)*N;
}
1
2
3
4
基本操作递归了N次，时间复杂度为O(N);
递归调用了N次，开辟了N个栈帧，每个栈帧使用了常数个空间，空间复杂度为O(N);

long long Factorial(size_t N)
{
	return N < 2 ? N : Factorial(N - 1) + Factorial(N-2);
}
1
2
3
4
基本操作递归了2 ^ N次，时间复杂度为O(2 ^ N);
动态开辟了N个空间，空间复杂度为O(N)
————————————————
版权声明：本文为CSDN博主「羊驼儿」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。
原文链接：https://blog.csdn.net/qq_44851228/article/details/105137217
