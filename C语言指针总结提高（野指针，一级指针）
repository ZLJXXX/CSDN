C语言指针总结提高（野指针，一级指针）

五道杠的小屁孩wwk 2020-05-19 22:41:30  32  收藏 1  原力计划
展开
在做项目中我们经常用到一级指针，比如传参啊，调用，字符串什么的。大家最熟悉的应该是一级指针。

1.野指针
这个词之前也听过，但是不确实是什么意思。先搜了一下百度百科，定义是：
野指针就是指针指向的位置是不可知的（随机的、不正确的、没有明确限制的）指针变量在定义时如果未初始化，其值是随机的，指针变量的值是别的变量的地址，意味着指针指向了一个地址是不确定的变量，此时去解引用就是去访问了一个不确定的地址，所以结果是不可知的。
也没看大懂，找了一些例子和一些讲解，其实引起野指针有两种情况。

初始化未被置NULL
释放时未被置NULL
#include "stdio.h"
int main(void)
{
	char *p = NULL;
	//p = (char *)malloc(100);
	p = (char *)malloc(sizeof(char) * 100);

	strcpy(p, "17823hdusa");
	printf("%s\n", p);

	if (p != NULL)
	{
		free(p);
	}
	if (p != NULL)
	{
		free(p);
	}
	system("pause");
}
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
比如这个代码，若在第一个判断时候，p已经释放干净了，那么接下去应该没什么事了。但是运行之后发现死机了。说明没有处理干净，这时的p就野指针。下面画个内存图示意一下：

当free之后，堆区的空间被释放了，但是p存放的仍是0xfff1，这样就在下面那个判断里面成立了。
所以改进方法就是在free之后再置为NULL。


2.一级指针
2.1直接修改和间接修改
#include "stdio.h"


int main(void)
{
	int a = 12;
	int *p = NULL;
	
	printf("修改前a: %d\n",a);

	a = 1000;
	p = &a;
	*p = 120;
	printf("修改后a: %d\n", a);
	system("pause");
}
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
这里也是很直观能看到修改后的值，这里是一级指针的第一个作用。通过指针修改变量的值。

#include "stdio.h"

void ChangeValue(int *a)
{
	*a = 1000;
}


int main(void)
{
	int a = 12;
	int *p = NULL;
	p = &a;
	printf("修改前a: %d\n",a);

	ChangeValue(&a);

	printf("修改后a: %d\n", a);

	system("pause");
}
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
这里是调用函数来修改变量的值，如果不传指针可以让返回值变为int也可以，但是如果要改变多个变量值时，就只能传指针。

2.2一级指针的赋值
#include "stdio.h"

int main(void)
{
	int *p1 = NULL;
	int **p2 = NULL;
	
	p1 = 0x0AA;
	p2 = 0x0BB;

	p2 = &p1;

	*p2 = 1823;
	printf("%5d\n", p1);
	printf("%5d\n", *p2);
	system("pause");
}
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
这里申明了两个指针，一个是一级指针，一个是二级指针。如果要让指针相互指的话，那么相当于要高一个等级才能接收指针的值。再比如一级指针传参的时候，也是需要二级指针来接收。

#include "stdio.h"

void ChangeValue(int **a)
{
	*a = 1000;
}

int main(void)
{
	int *p1 = NULL;
	int **p2 = NULL;
	
	p1 = 0x0AA;
	p2 = 0x0BB;

	p2 = &p1;

	*p2 = 1823;
	ChangeValue(&p1);
	printf("%5d\n", p1);
	printf("%5d\n", *p2);
	system("pause");
}
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
所以这里总结指针赋值规律：

- 函数调用时,用1指针（形参）改变0指针（实参）的值。
- 函数调用时,用2指针（形参）改变1指针（实参）的值。
- 函数调用时,用3指针（形参）改变2指针（实参）的值。
- 函数调用时,用n指针（形参）改变n-1指针（实参）的值。
————————————————
版权声明：本文为CSDN博主「五道杠的小屁孩wwk」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。
原文链接：https://blog.csdn.net/weixin_36101480/article/details/106223598
