【牛客】链表中环的入口结点，代码原理解析

fighting QAQ 2020-10-24 20:13:37  收藏
分类专栏： 每日一题 文章标签： 1024程序员节 链表 指针 面试
编辑 版权
链表中环的入口结点，代码原理解析
【本题链接】

题目描述
给一个链表，若其中包含环，请找出该链表的环的入口结点，否则，输出null。

解题思路
1.首先判断是否有环，快指针走两步，慢指针走一步，相遇则有环，快指针走到空，则没有环（前后指针法）
2.有环，则让其中一个指针重新指向链表头部，另一指针在相遇位置，两个指针同时出发，每次都走一步，再次相遇的位置就是环节点的入口。

代码实现
class Solution {
public:
    ListNode* EntryNodeOfLoop(ListNode* pHead)
    {
        ListNode* cur = pHead;
        ListNode* prev = pHead;
        while(cur!=nullptr && cur->next!=nullptr){
            prev = prev->next;
            cur = cur->next->next;
            if(prev == cur){
                prev = pHead;
                while(prev != cur){
                    prev = prev->next;
                    cur = cur->next;
                }
                return prev;
            }
        }
        return nullptr;
    }
};

原理解析
本题是《剑指offer》上的经典题型，面试常考，方法简单，但是原理才是本题最应该理解的地方。
在这里插入图片描述
链表有无环的原理
若链表无环，则快指针直接走到空，则结束；若链表有环，则快指针先入环，慢指针入环后，其快指针每次比慢指针多走一步，及其相对位置会逐渐减小，及一定会相遇。
链表的环入口原理
1.假设当慢指针slow走到t点时走过的距离为a，快指针fast走到m1点走的距离为a+b+xC(x表示圈数)，又因为fast是slow速度的两倍，即v(fast) = 2*v(slow)，则fast走过的路程是slow的两倍，即S(fast) = 2 * S(slow)。整合等式，即2a = a + b + xC,那么a = b + xC；
2.当他们进入环后，其fast在m1点，slow在t点，由于v(fast) = 2*v(slow)，则快慢指针相对距离为C - b,假设快慢指针走到m2点相遇，则相当于slow走了C - b,那么m2相遇点到环节点t点的距离为C - (C - b) + xC；
3.整合上式，则从快慢指针相遇位置到环节点的入口位置的距离为b + xC，再结合1中等式：a = b + xC；我们就可以得出慢节点为什么从头走，再次相遇便是入口。
