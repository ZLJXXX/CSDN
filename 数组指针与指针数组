数组指针与指针数组
数组指针：
什么是数组指针：能够指向数组的指针。
定义一个int (*p)[10]，首先（）的优先级高于[]所以p首先是一个指针，指向的是一个整形的一维数组，所以是数组指针。
数组指针是一个指针不是数组
因为数组指针指向的是数组，数组指针中存放的是数组的地址
数组指针的使用：

二维数组的传参：

#include<stdio.h>
#include<stdlib.h> 

void PrintfArr(int (*array)[5],int row,int col)
{
	for(int i = 0; i < row ; i++)
	{
		for(int j = 0; j < col; j++)
		{
			printf("%d ",array[i][j]);
		}
		printf("\n");
	}
}
int main()
{
	int arr[3][5] = {1,2,3,4,5,6,7,8,9};
	//二维数组的首元素是二维数组的第一行 
	//传入arr，其实相当一第一行的地址，是一个一维数组的地址
	//可以用数组指针来接收，表示存储的是第几行的首地址 
	PrintfArr(arr,3,5);
	return 0;
}
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
array++,进入到二维数组的下一行，所以数组指针也叫做行指针。

指针数组
定义int *p[n];
因为[]优先级高，先于p结合成为一个数组，再结合int *,说明这是一个整形的指针数组。
它们可以用来存放变量的地址，p = a,这里的p表示指针数组第一个元素的值。

总结：
数组指针只是一个指针变量，在C语言中，专门用来指向二维数组，他占有内存中一个指针的存储空间。
指针数组是多个指针的变量，以数组的形式存在于内存之中，占用多个指针的内存空间。

一维数组的传参

#include<stdio.h>
#include<stdlib.h> 

void test(int arr[])
{}
void test(int arr[10])
{} 
void test(int *arr)
{}

int main()
{
    int arr[10] = {0};    
	test(arr);    
	return 0;
} 
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
&数组名和数组名的区别
首先：数组名和&数组名打印地址是一样的

#include<stdio.h> 

int main()
{
	int arr[10] = {0};
	printf("%p\n",arr);
	printf("%p\n",&arr);
	return 0;
}
1
2
3
4
5
6
7
8
9
运行结果：

是否都可以用来表示数组的地址？

#include<stdio.h> 

int main()
{
	int arr[10] = {0};
	printf("arr =  %p\n",arr);
	printf("&arr = %p\n",&arr);
	
	printf("arr+1= %p\n",arr+1);
	printf("&arr+1=%p\n",&arr+ 1);
	return 0;
}
1
2
3
4
5
6
7
8
9
10
11
12
运行结果：

但是arr表示的是数组的首地址 arr + 1,加的是一个指针的大小，再者加的是4
&arr表示的是整个数组的地址 &arr + 1,加的是一个数组的大小，在这里加得是40
————————————————
版权声明：本文为CSDN博主「空洞的眼 眸阁」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。
原文链接：https://blog.csdn.net/qq_43806995/article/details/105616112
