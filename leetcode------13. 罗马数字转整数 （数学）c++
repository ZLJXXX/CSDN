leetcode------13. 罗马数字转整数 （数学）c++

阿柠xn 2020-06-23 21:46:06  31  收藏  原力计划
分类专栏： leetcode算法练习
版权
13. 罗马数字转整数 （数学）
题目
开始思考
我的解题
反思：
网友优解
题目
罗马数字包含以下七种字符: I， V， X， L，C，D 和 M。

字符	数值
I	1
V	5
X	10
L	50
C	100
D	500
M	1000
例如， 罗马数字 2 写做 II ，即为两个并列的 1。12 写做 XII ，即为 X + II 。 27 写做 XXVII, 即为 XX + V + II 。

通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做 IIII，而是 IV。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，数字 9 表示为 IX。这个特殊的规则只适用于以下六种情况：

I 可以放在 V (5) 和 X (10) 的左边，来表示 4 和 9。
X 可以放在 L (50) 和 C (100) 的左边，来表示 40 和 90。
C 可以放在 D (500) 和 M (1000) 的左边，来表示 400 和 900。
给定一个罗马数字，将其转换成整数。输入确保在 1 到 3999 的范围内。

示例 1:
输入: “III”
输出: 3

示例 2:
输入: “IV”
输出: 4

示例 3:
输入: “IX”
输出: 9

示例 4:
输入: “LVIII”
输出: 58
解释: L = 50, V= 5, III = 3.

示例 5:
输入: “MCMXCIV”
输出: 1994
解释: M = 1000, CM = 900, XC = 90, IV = 4.

开始思考
看到这个题目我的初始想法是这样的，其实就是判断字符串的内容，然后匹配对应的数字，然后呢，我的想法就是，首先把字符串变成一个一个字符，存在I,X,C这三个字母的时候我提前判断一手，来解决那个数字相减的问题。

我的解题
class Solution {
public:
    int romanToInt(string s) {
    int len=s.length();
    int res=0;
    int a=0;
    for(int i=0;i<len;i++){
        if(s[a]=='M'){
            if(a==0){
                res=res+1000;
            }else{
            if(s[a-1]=='C'){
             res=res+800;
                }
                else
                    res=res+1000;
            }
        }
        else if(s[a]=='D')
        {   if(a==0){
            res=res+500;
        }else{
             if(s[a-1]=='C'){
                    res=res+300;
                }
                else
                    res=res+500;
        }
        }
        else if(s[a]=='C'){
            if(a==0){
                res=res+100;
            }else{
            if(s[a-1]=='X'){
                    res=res+80;
                }
                else
                    res=res+100;
            }
        }
        else if(s[a]=='L'){
            if(a==0){
                res=res+50;
            }else{
            if(s[a-1]=='X'){
                    res=res+30;
                }
            else
                res=res+50;
            }
        }
        else if (s[a]=='X'){
            if(a==0){
            res=res+10;
            }else{
            if(s[a-1]=='I'){
                    res=res+8;
                }
                else
                    res=res+10;
            }
        }
        else if(s[a]=='V'){
            if(a==0){
                res=res+5;
            }else{
                if(s[a-1]=='I'){
                    res=res+3;
                }
                else
                    res=res+5;
            }
        }
        else if(s[a]=='I'){
            res=res+1;
        }
        a++;
    }
    return res;
    }
};
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
反思：
按照我的思路完成了任务，但是怎么说呢，代码很繁琐，很冗长，我看到那些优秀题解，都是十几行，而我确实洋洋洒洒的将近100行，，优秀题解使用了哈希表，这是我不明白的一个地方了，太菜了，还是要好好学习。有几个地方比较有意思

一开始我不知道c++里对于字符串可以直接就 s[ ]，这样的形式就可以得到字符串的每个字符，导致一开始做了很多无用功。
leetcode的编译器和codeblocks不一样，leetcode会检测数组下标为负的情况，而codeblocks好像是内部解决了这一问题，最终我添加了一个if语句解决了这一问题。
网友优解
class Solution {
public:
    int romanToInt(string s) {
        int result=0;
        map<char,int> luomab={
            {'I',1},
            {'V',5},
            {'X',10},
            {'L',50},
            {'C',100},
            {'D', 500},
            {'M', 1000}
        };//初始化哈希表
        for(int i=0;i<s.length();i++)
        {
            if(luomab[s[i]] < luomab[s[i+1]])
                result -= luomab[s[i]];//意思是啥呢，就是后面的数比前面的大，
                //那你把这个数减去，就是这样
            else
            {
                result += luomab[s[i]];
            }
        }
        return result;
    }
};
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
c++的map是有序的，内部是红黑树， unordered_map这个类型是哈希表。
其实用数组依旧也是可以的，没必要一定使用map。

class Solution {
public:
    int romanToInt(string s) {
        int chars[89], ans = 0;;
        chars['I'] = 1; chars['V'] = 5; chars['X'] = 10; chars['L'] = 50;
        chars['C'] = 100; chars['D'] = 500; chars['M'] = 1000;
 
        for (int i = 0; i < s.length(); ++i) {
            if (chars[s[i]] >= chars[s[i + 1]])
                ans += chars[s[i]];
            else ans -= chars[s[i]];
        }
        return ans;
    }
};
————————————————
版权声明：本文为CSDN博主「阿柠xn」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。
原文链接：https://blog.csdn.net/wxnshuai/article/details/106927069
