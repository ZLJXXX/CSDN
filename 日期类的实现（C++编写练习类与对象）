日期类的实现（C++编写练习类与对象）

fighting QAQ 2020-05-30 12:06:22  1  收藏
编辑 展开
日期类的实现（C++编写）
本篇目录
日期类的实现（C++编写）
1.类与对象：
2.日期类的实现
2.1类的结构
2.2类的构造函数
2.3类的析构函数
2.4类的拷贝构造函数
2.5运算符重载
2.5.1赋值运算符重载
2.5.2+=运算符重载
2.5.2+运算符重载
2.5.3-=/-运算符重载
3.总结
4.完整代码
1.类与对象：
类与对象主要叙述了类的构造和用法，三种访问方式，还有6个默认成员函数的原理作用及使用。这一节知识点不再叙述了，类的操作主要还是需要实践的。我们通过日期类的实现可以有效的锻炼类的使用。

2.日期类的实现
2.1类的结构
首先要使用类必须明白类的结构

class className { // 类体：由成员函数和成员变量组成

}; // 一定要注意后面的分号

2.2类的构造函数
#include<iostream>
using namespace std;
class Data
{
public:
	Data(int year = 2020, int month = 5, int day = 30)
	{
		_year = year;
		_month = month;
		_day = day;
	}
private:
	int _year;
	int _month;
	int _day;
};
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
通过构造函数实现对类中自定义对象进行初始化

2.3类的析构函数
由于类在构造函数时没有进行空间申请，所以我们调用析构函数时不用手动释放资源，直接调用系统默认的析构函数

 ~Data()
	{
	};
1
2
3
2.4类的拷贝构造函数
拷贝构造函数可以理解为将一个类对象的成员复制粘贴的同一个类中另一个类对象上（你抄你哥作业）

Data(const Data& d)
	{
		_year = d._year;
		_month = d._month;
		_day = d._day;
	}
1
2
3
4
5
6
2.5运算符重载
C++为了增强代码的可读性引入了运算符重载，运算符重载是具有特殊函数名的函数，也具有其返回值类
型，函数名字以及参数列表，其返回值类型与参数列表与普通的函数类似。
函数名字为：关键字operator后面接需要重载的运算符符号。
函数原型：返回值类型 operator操作符(参数列表)

注意： 不能通过连接其他符号来创建新的操作符：比如operator@ 重载操作符必须有一个类类型或者枚举类型的操作数
用于内置类型的操作符，其含义不能改变，例如：内置的整型+，不 能改变其含义

作为类成员的重载函数时，其形参看起来比操作数数目少1成员函数的 操作符有一个默认的形参this，限定为第一个形参 .* 、::
、sizeof 、?: 、. 注意以上5个运算符不能重载。这个经常在笔试选择题中出现。

2.5.1赋值运算符重载
功能与拷贝构造函数一样，原理类似，只不过实现方式不同

	Data& operator=(const Data& d)
	{
		if (this != &d)
		{
			_year = d._year;
			_month = d._month;
			_day = d._day;
		}
		return *this;
	}
1
2
3
4
5
6
7
8
9
10
2.5.2+=运算符重载
通过运算符重载实现日期类中日期+=的操作，但是日期类中日期+=操作需要进行特殊的处理，比如一个月不可能存在33天，并且平年和闰年二月也不相同
首先要判断是否是闰年

bool IsLeapyear(int year)
	{
		return (((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0));
	}
1
2
3
4
确定每个月的天数，实现日期的进位

int GetmonthDay(int year, int month)
	{
		static int monthday[13] = { 0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };
		if (IsLeapyear(year) && month == 2)
		{
			return 29;
		}
		else
		{
			return monthday[month];
		}
	}
1
2
3
4
5
6
7
8
9
10
11
12
+=运算符重载实现日期进位

Date& operator+=(int day)
		{
			_day += day;
			while (_day > GetmonthDay(_year, _month))
			{
				_day = _day - GetmonthDay(_year, _month);
				_month += 1;
				if (_month > 12)
				{
					++_year;
					_month = 1;
				}
			}
			return *this;
		}
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
2.5.2+运算符重载
通过拷贝this，复用+=运算符，实现

Date operator+(int day)
//不会改变原来日期值，日期加上天数
		{
			Date ret = *this;//拷贝this指针
			return ret += day;

		}
1
2
3
4
5
6
7
2.5.3-=/-运算符重载
与+=/+运算符原理相同，不再细说

Date& operator-=(int day)
		{
			if (day < 0)
			{
				return *this += (-day);
			}

			_day = _day - day;
			while (_day < 1)
			{
				_month -= 1;
				if (_month == 0)
				{
					_month = 12;
					--_year;
				}

				_day += GetmonthDay(_year, _month);
			}

			return *this;
		}

		Date operator-(int day)
		{
			Date ret = *this;
			return ret -= day;
		}
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
3.总结
通过日期类的实现，来使用了类与对象，掌握到默认成员函数的用法

4.完整代码
#define _CRT_SECURE_NO_WARNINGS
#include<iostream>
#pragma once
using namespace std;

class Date
{

public:
	
	//构造函数并初始化
	Date(int year = 2018, int month = 1, int day = 1)
		:_year(year)
		,_month(month)
		,_day(day)
		{
	
		}
		//析构函数
		~Date()
		{
		}
		//拷贝构造函数
		Date(const Date& d)//必须传引用，否则会出现无限递归
		{
			_year = d._year;
			_month = d._month;
			_day = d._day;
		}
		//赋值运算符重载
		Date& operator=(const Date& d)
		{
			if (this != &d)
			{
				_year = d._year;
				_month = d._month;
				_day = d._day;
			}
			return *this;
		}


	//判断平年闰年
	bool IsLeapyear(int year)//判断是否为闰年
	{
		return ((year % 4 == 0 && year % 100 != 0) || year % 400 == 0);
	}
	//确定每个月的天数
	int GetmonthDay(int year, int month)
	{
		static int monthday[13] = { 0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };
		if (IsLeapyear(year) && month == 2)
		{
			return 29;
		}
		else
		{
			return monthday[month];
		}
	}
		//运算符重载
		bool operator==(const Date& d)
		{
			return _year == d._year
				&&_month == d._month
				&&_day == d._day;
		}
		Date& operator+=(int day)
		{
			_day += day;
			while (_day > GetmonthDay(_year, _month))
			{
				_day = _day - GetmonthDay(_year, _month);
				_month += 1;
				if (_month > 12)
				{
					++_year;
					_month = 1;
				}
			}
			return *this;
		}
		Date operator+(int day)//不会改变原来日期值，日期加上天数
		{
			Date ret = *this;//拷贝this指针
			return ret += day;

		}
		Date& operator-=(int day)
		{
			if (day < 0)
			{
				return *this += (-day);
			}

			_day = _day - day;
			while (_day < 1)
			{
				_month -= 1;
				if (_month == 0)
				{
					_month = 12;
					--_year;
				}

				_day += GetmonthDay(_year, _month);
			}

			return *this;
		}

		Date operator-(int day)
		{
			Date ret = *this;
			return ret -= day;
		}
		void PrintDate1()
		{
			cout << "原来的日期" << _year << "-" << _month << "-" << _day << endl;
		}

		void PrintDate2()
		{
			cout << "加日期后的日期" << _year << "-" << _month << "-" << _day << endl;
		}

		void PrintDate3()
		{
			cout << "加日期后的日期" << _year << "-" << _month << "-" << _day << endl;
		}

		void PrintDate4()
		{
			cout << "减掉日期后的日期" << _year << "-" << _month << "-" << _day << endl;
		}


	private:
		int _year;
		int _month;
		int _day;
	};


	int main()
	{
		Date d1(2019, 9, 18);
		d1.PrintDate1();
		Date d2;
		d2 = d1 + 66;
		d2.PrintDate2();

		Date d3;
		d3 += 66;
		d3.PrintDate3();

		Date d4 = d1 - 66;
		d4.PrintDate4();


		system("pause");
		return 0;
	}
————————————————
版权声明：本文为CSDN博主「fighting QAQ」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。
原文链接：https://blog.csdn.net/qq_43676757/article/details/106438717
