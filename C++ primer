C++ primer 第五版个人笔记 第十四章 重载运算与类型转换

Mint2yx4 2020-05-10 21:01:52  2  收藏  原力计划
展开
14.1 基本概念
除了重载的函数调用运算符operator()外，其他重载运算符不能含有默认实参；
当一个重载的运算符是成员函数时，this绑定到左侧运算对象，成员运算符函数的（显式）参数数量比运算对象少一个；
对于一个运算符函数来说，它或者是类的成员或者至少含有一个类类型的参数；不能为内置类型的运算对象改变运算符的含义；
有四个符号（+，-，*，&）既是一元运算符也是二元运算符，都能重载，从参数的数量可以推断到底定义的是那种运算符；
重载的运算符的优先级和结合律与对应的内置运算符保持一致；
不能被重载的运算符(::) , (.*), (.), (? :)
可以使用运算符的直接和间接调用
data1 + data2 ;
operator+(data1,data2);  //两种调用方式等价
 

调用重载的成员运算符函数

data1 += data2;
data1.operator+(data2);   //两种调用方式等价
 

有些函数在C++里有一些特定规定，如|| 和&&的短路属性，因此不建议重载逗号（，）取地址（&）逻辑与（&&）逻辑或（&&）；

确定运算符定义为成员函数还是普通的非成员运算符有一下几个准则；a，赋值（=），下标（[]），调用（()），和成员访问箭头（->）运算符必须是成员； b, 符合赋值运算符一般来说应该is成员，但并非必须； c, 改变对象状态的运算符或者与给定类型密切相关的运算符，如递增、递减和解引用运算符，通常应该是成员； d, 具有对称性的运算符可能转换任一一端的运算对象，如算术、相等性、关系和位运算符等，通常应该是普通的非成员函数； 

 14.2 输入和输出运算符
输出运算符的第一个形参是一个非常量ostream对象的引用，非常量是因为向流写入内容会改变其状态，引用是因为不能直接复制一个ostream对象；
通常输出运算符应该主要负责打印对象的内容而非控制格式，输出运算符不应该打印换行符；
为类自定义IO运算符的时候，必须将其定义为非成员函数，并且一般要声明为友元；
输入运算符必须考虑输入可能失败的情况，而输出运算符不需要，详见495页代码，当读取操作发生错误时，输入运算应该负责从错误中恢复，书例中的办法是赋予一个默认构造的空sales_data对象；
 
14.3 算术和关系运算符
如果存在唯一一种逻辑可靠的<定义，则应该考虑为这个类定义<运算符；如果类同时还包含==，则当且仅当<的定义和==的结果一致时才定义<运算符；简而言之就是如果存在歧义的<运算符，最好不要定义；
 

14.4 赋值运算符
vector的值初始化实际是重载了 赋值运算符=，参数是一个初始化列表(initializer_list<string> il)；
赋值运算符必须定义为类的成员（因其要返回左侧对象的引用），复合赋值运算符通常情况下也应该这么做；
 

14.5 下标运算符
如果一个类包含下标运算符，则它通常会定义两个版本，一个返回普通引用，另一个是类的常量成员并且返回常量引用；
————————————————
版权声明：本文为CSDN博主「Mint2yx4」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。
原文链接：https://blog.csdn.net/Mint2yx4/article/details/106031981
