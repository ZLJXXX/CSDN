八大排序基础知识以及排序算法和代码总结

张晓寅 2020-05-02 22:47:54  53  收藏  原力计划
展开






//交换函数
 
void Swap(int* array, int min, int start) {
    int tmp = array[min];
    array[min] = array[start];
    array[start] = tmp;
}
一.直接插入排序:把待排序的记录按其关键码值的大小逐个插入到一个已排好序的有序序列中,直到所有的记录插入完为止,得到一个新的有序序列.

特性总结:

①.元素集合越接近有序,直接插入排序算法的效率越高;

②.时间复杂度: O(N^2);

③.空间复杂度:O(1),稳定的排序算法;

④.稳定性:稳定.



void insertSort(int* array, int n) {
    for (int i = 0; i < n - 1; i++) {
        //end 已排序的最后一个位置
        //k 待插入的元素(数据)
        int end = i;
        int key = array[end + 1];
        //找到第一个小于等于key的位置
        //如果array[end]的值大于k的值则向后移动
        while (end >= 0 && array[end] > key) {
            array[end + 1] = array[end];
            end--;
        }
        //插入到end的后面
        array[end + 1] = key;
    }
}
二.希尔排序:又称缩小增量排序.

     基本思想:先选定一个整数,把待排序文件中所有记录分成组,所有距离相同的记录分在同一个组内,并对每一组内的记录进行排序,重复上述分组和排序的过程.当距离等于1时,所有的记录在统一组内排好序.

特性总结:

①.是对直接插入排序的优化;

②.当gap>1时都是预排序,目的是让数组更接近有序.当gap==1时,数组已经接近有序,这样就会很快.整体而言,可以达到优化的效果.

③.时间复杂度:O(N^1.3)

④.稳定性:不稳定(相同的数分在不同的组)



void shellSort(int* array, int n) {
    int gap = n;
    while (gap > 1) {
         gap = gap / 2;
        for (int i = 0; i < n - gap; i += gap) {
            int end = i;
            int key = array[end + gap];
            while (end >= 0 && array[end] > key) {
                array[end + gap] = array[end];
                end -= gap;
            }
            array[end + gap] = key;
        }
    }
}
三.直接选择排序:

特性总结:

①.直接选择排序非常好理解,但是效率不是很好,实际中很少使用;

②.时间复杂度:O(N^2);

③.空间复杂度:O(1);

④.稳定性:不稳定.



void selectSort1(int* array, int n) {
    for (int i = 0; i < n - 1; i++) {
        int min = i;
        int start = i;
        for (int j = start+1; j < n; j++) {
            if (array[j] < array[min]) {
                min = j;
            }
        }
        Swap(array, start, min);
    }
 
}
void selectSort2(int * array, int n){
    int begin = 0;
    int end = n - 1;
    while (begin < end) {
        int min = begin;
        int max = begin;
        for (int i = begin+1; i <= end; i++) {
            if (array[i] >= array[max])
                max = i;
            if (array[i] < array[min])
                min = i;
        }
 
/*
        Swap(array, begin, min);     
        if (max == begin)          
            max = min;             
        Swap(array, end, max);      
*/
 
        Swap(array,end,max);
 
        if(min == end)
 
        min = max;
 
        Swap(array,begin,min);
        begin++;                    
        end--;
    }
}
四.堆排序:是指利用堆积树(堆)这种数据结构所设计的一种排序算法,是排序的一种.通过堆来进行选择数据.

 注意:排升序要建大堆,排降序建小堆.

特性总结:

①.堆排序使用堆来选数,效率高了很多;

②.时间复杂度:O(N*logN);

③.空间复杂度:O(1);

④.稳定性:不稳定.

 

   

  //利用多次向下调整建堆
void shiftDown(int* array, int n, int parent) {
    int child = parent * 2 + 1;
    while (child < n) {
        if (child+1<n && array[child] < array[child + 1])
            child++;
        if (array[parent] < array[child])
            Swap(array, parent, child);
    }
}
//堆排序
void heapSort(int* array, int n) {
    for (int i = (n - 2) / 2; i >= 0; i--) {
        shiftDown(array, n, i);
    }
    while (n) {
        Swap(array, 0, n - 1);
        n--;
        shiftDown(array, n, 0);
    }
}
五.冒泡排序:所谓交换,就是根据序列中两个记录值的比较结果来交换两个记录在序列中的位置,交换排序的特点是:将键值较大的记录向序列的尾部移动,键值较小的记录向序列的前部移动.

特性总结:

①.冒泡排序是一种非常容易理解的排序;

②.时间复杂度:O(N^2);

③.空间复杂度:O(1);

④.稳定性:稳定.



void bubbleSort(int* array, int n) {
    //往后冒泡
    while (n) {
        int flag = 1; // flag = 1 表示未交换
        for (int i = 0; i < n - 1; i++) {
            if (array[i] > array[i + 1]) {
                Swap(array, i, i + 1);
                flag = 0;
            }
        }
        if (flag)
            break;
        n--;
    }
}
六.快速排序:任取待排序元素序列中的某元素作为基准值,按照该排序码将待排序集合分割成两个子序列,左子序列中所有元素均小于基准值,右子序列中的所有元素均大于基准值,然后左右子序列重复该过程,直到所有元素都排列在相应的位置.

快速排序的特性总结:

①.快速排序整体的综合性能和使用场景都是比较好的,所以才敢叫快速排序;

②.时间复杂度:O(N*logN);

③.稳定性:不稳定

 

//快排优化:三数取中key
int GetMid(int* array, int begin, int end) {
    int mid = begin + (end - begin) / 2;
    if (array[begin] < array[mid]) {
        if (array[mid] < array[end])
            return mid;
        else {
            if (array[begin] > array[end])
                return begin;
            else
                return end;
        }
    }
    else {
        if (array[mid] > array[end])
            return mid;
        else {
            if (array[begin] > array[end])
                return end;
            else
                return begin;
        }
    }
}
 
hoare法获取基准点:
int partion(int* array, int begin, int end) {
 
    int mid = GetMid(array,begin,end);
 
    Swap(array,begin,mid);
 
    int key = array[begin];
    int start = begin;
    while (begin < end) {
        while (begin < end && array[end] >= key) {
            end--;
        }
        while (begin < end && array[begin] <= key) {
            begin++;
        }
        Swap(array, begin, end);
    }
    //begin 与 end 相遇
    Swap(array, start, begin);
    return begin;
}
挖坑法:
int partion1(int* array, int begin, int end) {
 
    int mid = GetMid(array,begin,end);
 
    Swap(array,begin,mid);
 
    int key = array[begin];
    int start = begin;
    while (begin < end) {
        //从后往前找一个比基准值小的数把填上一个坑
        while (begin < end && array[end] >= key) {
            end--;
        }
        //填坑
        array[begin] = array[end];
        //从前往后找一个比基准值大的数填上一个坑
        while (begin < end && array[begin] <= key) {
            begin++;
        }
        //填坑
        array[end] = array[begin];
    }
    //将基准值填入坑
    array[begin] = key;
    return begin;
}
前后指针法:
int partion2(int* array, int begin, int end) {
 
    int mid = GetMid(array,begin,end);
 
    Swap(array,begin,mid);
 
    int prev = begin;
    int cur = prev + 1;
    int key = array[begin];
    while (cur <= end) {
        if (array[cur] < key && ++prev != cur) {
            Swap(array,prev,cur);
        }
        cur++;
       /*if (array[cur] < key && prev + 1 != cur) {
            Swap(array, prev + 1, cur);
            cur++;
            prev++;
        }
        else if (array[cur] < key && prev + 1 == cur) {
            prev++;
            cur++;
        }
        else
            cur++;
        }*/
    }
    Swap(array, begin, prev);
    return prev;
}
//递归实现快排
void quickSort(int* array, int begin, int end) {
    if (begin >= end)
        return;
    //int keyPos = partion(array, begin, end);
    //int keyPos = partion1(array, begin, end);
    int keyPos = partion2(array, begin, end);
    quickSort(array, begin, keyPos - 1);
    quickSort(array, keyPos + 1, end);
}
 
//非递归实现快排
 
①利用栈实现
 
void quickSortNor(int* array, int n){
    Stack sk;
    StackInit(&sk, 10);
    if (n > 1) {
        StackPush(&sk,n-1);
        StackPush(&sk, 0);
    }
    while (StackEmpty(&sk) != 1) {
        int begin = StackTop(&sk);
        StackPop(&sk);
        int end = StackTop(&sk);
        StackPop(&sk);
        int keypos = partion(array, begin, end);
        if (keypos + 1 < end) {
            StackPush(&sk, end);
            StackPush(&sk, keypos + 1);
        }
        if(begin < keypos-1){
            StackPush(&sk, keypos - 1);
            StackPush(&sk, begin);
        }
    }
}
 
//利用队列实现
 
void quickSortNor(int* array, int n) {
    Queue q;
    QueueInit(&q);
    if (n > 1) {
        QueuePushBack(&q, 0);
        QueuePushBack(&q, n - 1);
    }
    while (QueueEmpty(&q) != 1) {
        int begin = QueueTop(&q);
        QueuePopFront(&q);
        int end = QueueTop(&q);
        QueuePopFront(&q);
        int keypos = partion(array, begin, end);
        if (keypos - 1 > begin) {
            QueuePushBack(&q, begin);
            QueuePushBack(&q, keypos-1);
        }
        if (keypos + 1 < end) {
            QueuePushBack(&q, keypos+1);
            QueuePushBack(&q, end);
        }
    }
}
七.归并排序:该算法采用分治法,将已有序的序列合并,得到完全有序的序列;即先使每个子序列有序,再使子序列段间有序.若将两个有序表合并成一个有序表,称为二路归并.核心步骤包括合并与分解.

归并排序的特性总结:

①.归并的缺点在于需要O(N)的空间复杂度,归并排序的思考更多的是解决在磁盘中的外排序问题;

②.时间复杂度:O(N*logN);

③.空间复杂度:O(N);

④.稳定性:稳定.

//两个有序数组的合并
void merge(int* array, int begin, int mid, int end,int* tmp) {
    int begin1 = begin, end1 = mid, begin2 = mid + 1, end2 = end;
    int idx = begin;
    while (begin1 <= end1 && begin2 <= end2) {
        if (array[begin1] <= array[begin2])
            tmp[idx++] = array[begin1++];
        else
            tmp[idx++] = array[begin2++];
    }
    if (begin1 <= end1)
        memcpy(tmp + idx, array + begin1, sizeof(int)*(end1 - begin1 + 1));
    if (begin2 <= end2)
        memcpy(tmp + idx, array + begin2, sizeof(int)*(end2 - begin2 + 1));
    memcpy(array+begin, tmp+begin, sizeof(int)*(end - begin + 1));
}
 
//递归实现归并排序(实际就是分解)
 
void mergeSortR(int* array, int begin, int end,int* tmp) {
    if (begin >= end)
        return;
    int mid = begin + (end - begin) / 2;
    mergeSortR(array, begin, mid,tmp);
    mergeSortR(array, mid + 1, end,tmp);
    merge(array, begin, mid , end,tmp);
}
 
void mergeSort(int* array, int n) {
    int* tmp = (int*)malloc(sizeof(int)*n);
    mergeSortR(array, 0, n - 1, tmp);
    free(tmp);
}
 
void mergeSortNor(int* array, int n) {
    int* tmp = (int*)malloc(sizeof(int)*n);
    int k = 1;
    while (k < n) {
        for (int i = 0; i < n; i += 2 * k) {
 
            int begin = i;
            int mid = i + k - 1;
            if (mid >= n - 1)
                continue;
            int end = i + 2 * k - 1;
            if (end > n - 1)
                end = n - 1;
            merge(array, begin, mid, end, tmp);
        }
        k = 2 * k;
    }
 
   free(tmp);
}
 

八.计数排序:又称鸽巢原理,是对哈希直接定址法的变形应用.

计数排序的特性总结:

①.计数排序在数据范围集中时,效率很高,但是适用范围及场景有限;

②.时间复杂度:O(MAX(N,范围));

③.空间复杂度:O(范围);④.稳定性:稳定(教材上一般是这样写的).
 

void countSort(int* array, int n) {
    //统计范围
    int min = array[0], max = array[0];
    for (int i = 1; i < n; i++) {
        if (array[i] < min)
            min = array[i];
        if (array[i] > max)
            max = array[i];
    }
    //开空间
    int range = max - min + 1;
    int* countArr = (int*)malloc(sizeof(int)*range);
    //将数组初始化为全0
    memset(countArr, 0, sizeof(int)*range);
 
    //计数
    for (int i = 0; i < range; i++) {
        countArr[array[i]-min]++;
    }
    //恢复数组
    int idx = 0;
    for (int i = 0; i < range; i++) {
        while (countArr[i]--)
            array[idx++] = i + min;
    }
    free(countArr);
}

————————————————
版权声明：本文为CSDN博主「张晓寅」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。
原文链接：https://blog.csdn.net/HUAERBUSHI521/article/details/105801227
