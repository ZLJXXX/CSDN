力扣第455题---分发饼干

leetcode刷题笔记

力扣第455题—分发饼干
题目
假设你是一位很棒的家长，想要给你的孩子们一些小饼干。但是，每个孩子
最多只能给一块饼干。对每个孩子 i，都有一个胃口值 g[i]，这是能让孩子们满足胃口的饼干的最小尺寸；并且每块饼干 j，都有一个尺寸 s[j] 。如果 s[j] >= g[i]，我们可以将这个饼干 j 分配给孩子 i ，这个孩子会得到满足。你的目标是尽可能满足越多数量的孩子，并输出这个最大数值。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/assign-cookies

示例
示例1
输入: g = [1,2,3], s = [1,1]
输出: 1
解释: 
你有三个孩子和两块小饼干，3个孩子的胃口值分别是：1,2,3。
虽然你有两块小饼干，由于他们的尺寸都是1，你只能让胃口值是1的孩子满足。
所以你应该输出1。
1
2
3
4
5
6
示例2
输入: g = [1,2], s = [1,2,3]
输出: 2
解释: 
你有两个孩子和三块小饼干，2个孩子的胃口值分别是1,2。
你拥有的饼干数量和尺寸都足以让所有孩子满足。
所以你应该输出2.
1
2
3
4
5
6
题意分析
根据题目，当饼干的大小大于等于小孩的胃口即可填饱肚子。换种思路是说，只需要找到大于等于这个小孩数组每一下标的值的饼干，累计下来就是解。

题解思路
根据以上分析，那我们可以将两个数组进行排序（从大到小或者从小到打都行），然后以饼干数组s为基础进行循环，对每一项与当前孩子的数组g当前位置小标进行比较，若符合条件则累加1。此情此景，我们就会想到贪心算法或者说是贪心思想，即保证每次操作都是局部最优的，从而使最后的结果是全局最优的。这里我们将两个数组进行排序，那即将饼干尺寸最小的分发给相应胃口最小的孩子，这样得到局部最优，从而循环结束后得到全局最优

代码
/*
	 * 排序+贪心算法
	 */
public class _455distribution {
	public static void main(String[] args) {
		System.out.println(findContentChildren(new int[] {1,2}, new int[] {1,2,3}));
	}
	 public static int findContentChildren(int[] g, int[] s) {
		 Arrays.sort(g);
		 Arrays.sort(s);
		 int childrenNum = g.length;
		 int cookies = s.length;
		 int count = 0;
		 for (int j = 0; count < childrenNum && j < cookies; j++) {
			if (g[count] <= s[j]) {
				count++;
			}
		}
		 return count;
	 }
}
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
如有不对，欢迎指正！！！
