C++map

fighting QAQ 2020-07-18 13:22:35  1  收藏
分类专栏： C++ 文章标签： c++
编辑 版权
C++map
【本章内容】
C++map
1.map
2.map的使用
3.multiset和 multimap
1.map
【map的文档简介】
翻译：

map是关联容器，它按照特定的次序(按照key来比较)存储由键值key和值value组合而成的元素。
在map中，键值key通常用于排序和惟一地标识元素，而值value中存储与此键值key关联的内容。键值key和值value的类型可能不同，并且在map的内部，key与value通过成员类型value_type绑定在一起，为其取别名称为pair:
typedef pair value_type;
在内部，map中的元素总是按照键值key进行比较排序的。
map中通过键值访问单个元素的速度通常unordered_map容器慢，但map允许根据顺序对元素进行直接迭代(即对map中的元素进行迭代时，可以得到一个有序的序列)。
map支持下标访问符，即在[]中放入key，就可以找到与key对应的value。
map通常被实现为二叉搜索树((更准确的说：平衡二叉搜索树（红黑树)）。
2.map的使用
map的模板参数说明

key: 键值对中key的类型
T： 键值对中value的类型
Compare: 比较器的类型，map中的元素是按照key来比较的，缺省情况下按照小于来比较，一般情况下(内置类型元素)该参数不需要传递，如果无法比较时(自定义类型)，需要用户自己显式传递比较规则
(一般情况下按照函数指针或者仿函数来传递)
Alloc：通过空间配置器来申请底层空间，不需要用户传递，除非用户不想使用标准库提供的空间配置器
注意：在使用map时，需要包含头文件。
2.map的构造
函数声明	功能介绍
map()	构造一个空的map
3.map的迭代器

函数声明	功能介绍
begin()和end()	begin:首元素的位置，end最后一个元素的下一个位置
cbegin()和cend()	与begin和end意义相同，但cbegin和cend所指向的元素不能修改
rbegin()和rend()	反向迭代器，rbegin在end位置，rend在begin位置，其++和–操作与begin和end操作移动相反
crbegin()和crend()	与rbegin和rend位置相同，操作相同，但crbegin和crend所指向的元素不能修改
map的容量与元素访问
函数声明	功能介绍
bool empty ( ) const	检测map中的元素是否为空，是返回true，否则返回false
size_type size() const	返回map中有效元素的个数
mapped_type& operator[] (const key_type& k)	返回去key对应的value
问题：当key不在map中时，通过operator获取对应value时会发生什么问题？

注意：在元素访问时，有一个与operator[]类似的操作at()(该函数不常用)函数，都是通过key找到与key对应的value然后返回其引用，不同的是：当key不存在时，operator[]用默认value与key构造键值对然后插入，返回该默认value，at()函数直接抛异常。
5. map中元素的修改

函数声明	功能简介
pair<iterator,bool> insert (const value_type& x )	在map中插入键值对x，注意x是一个键值对，返回值也是键值对：iterator代表新插入元素的位置，bool代表释放插入成功
void erase ( iterator position )	删除position位置上的元素
size_type erase ( const key_type& x )	删除键值为x的元素
void erase ( iterator first, iterator last )	删除[first, last)区间中的元素
void swap (map<Key,T,Compare,Allocator> &mp )	交换两个map中的元素
void clear ( )	将map中的元素清空
iterator find ( const key_type& x)	在map中插入key为x的元素，找到返回该元素的位置的迭代器，否则返回end
const_iterator find ( const key_type& x ) const	在map中插入key为x的元素，找到返回该元素的位置的const迭代器，否则返回cend
size_type count ( const key_type& x ) const	返回key为x的键值在map中的个数，注意map中key是唯一的，因此该函数的返回值要么为0，要么为1，因此也可以用该函数来检测一个key是否在map中
#include <string>
#include <map>
void TestMap()
{
 map<string, string> m;
 // 向map中插入元素的方式：
 // 将键值对<"peach","桃子">插入map中，用pair直接来构造键值对
 m.insert(pair<string, string>("peach", "桃子"));
 // 将键值对<"peach","桃子">插入map中，用make_pair函数来构造键值对
 m.insert(make_pair("banan", "香蕉"));

 // 借用operator[]向map中插入元素
 /*
 operator[]的原理是：
 用<key, T()>构造一个键值对，然后调用insert()函数将该键值对插入到map中
 如果key已经存在，插入失败，insert函数返回该key所在位置的迭代器
 如果key不存在，插入成功，insert函数返回新插入元素所在位置的迭代器
 operator[]函数最后将insert返回值键值对中的value返回
 */
 // 将<"apple", "">插入map中，插入成功，返回value的引用，将“苹果”赋值给该引用结果，
 m["apple"] = "苹果";
 // key不存在时抛异常
 //m.at("waterme") = "水蜜桃";
 cout << m.size() << endl;
 // 用迭代器去遍历map中的元素，可以得到一个按照key排序的序列
 for (auto& e : m)
 cout << e.first << "--->" << e.second << endl;
 cout << endl;
 // map中的键值对key一定是唯一的，如果key存在将插入失败
 auto ret = m.insert(make_pair("peach", "桃色"));
 if (ret.second)
 cout << "<peach, 桃色>不在map中, 已经插入" << endl;
 else
 cout << "键值为peach的元素已经存在：" << ret.first->first << "--->" <<
ret.first->second <<" 插入失败"<< endl;
 // 删除key为"apple"的元素
 m.erase("apple");
 if (1 == m.count("apple"))
 	cout<<"apple还在"<<endl;
 else
 	cout<<"apple被吃了"<<endl;
}
void test_map_set4()
{
	string str[] = { "草莓", "苹果", "香蕉", "苹果", "苹果", "香蕉" };
	map<string, int> countMap;
	for (auto& e : str)
	{
		countMap[e]++;
	}
	//operator[]可以用来插入和修改
	countMap["菠萝"];
	countMap["菠萝"] = 5;
	for (auto e : countMap)
	{
		cout << e.first << ":" << e.second << endl;
	}
}
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
【总结】

map中的的元素是键值对
map中的key是唯一的，并且不能修改
默认按照小于的方式对key进行比较
map中的元素如果用迭代器去遍历，可以得到一个有序的序列
map的底层为平衡搜索树(红黑树)，查找效率比较高
支持[]操作符，operator[]中实际进行插入查找。
3.multiset和 multimap
3…1 multiset的介绍

multiset是按照特定顺序存储元素的容器，其中元素是可以重复的。
在multiset中，元素的value也会识别它(因为multiset中本身存储的就是<value, value>组成的键值对，
因此value本身就是key，key就是value，类型为T). multiset元素的值不能在容器中进行修改(因为元素
总是const的)，但可以从容器中插入或删除。
在内部，multiset中的元素总是按照其内部比较规则(类型比较)所指示的特定严格弱排序准则进行排
序。
multiset容器通过key访问单个元素的速度通常比unordered_multiset容器慢，但当使用迭代器遍历时
会得到一个有序序列。
multiset底层结构为二叉搜索树(红黑树)。
注意：
multiset中再底层中存储的是<value, value>的键值对
mtltiset的插入接口中只需要插入即可
与set的区别是，multiset中的元素可以重复，set是中value是唯一的
使用迭代器对multiset中的元素进行遍历，可以得到有序的序列
multiset中的元素不能修改
在multiset中找某个元素，时间复杂度为
multiset的作用：可以对元素进行排序
3.2 multimap的使用
multimap中的接口可以参考map，功能都是类似的。
注意：
multimap中的key是可以重复的。
multimap中的元素默认将key按照小于来比较
multimap中没有重载operator[]操作(同学们可思考下为什么?)。
使用时与map包含的头文件相同：
总结： multiset和 multimap的用法和map、set相同，了解就行。主要解决数据冗余的问题，其键值可以重复。
————————————————
版权声明：本文为CSDN博主「fighting QAQ」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。
原文链接：https://blog.csdn.net/qq_43676757/article/details/107427260
