【牛客】[编程题]组队竞赛
原创fighting QAQ 最后发布于2020-03-13 18:29:38 阅读数 1  收藏
编辑 展开
[编程题]组队竞赛
本提链接：https://www.nowcoder.com/questionTerminal/6736cc3ffd1444a4a0057dee89be789b?orderByHotValue=1&page=1&onlyReference=false

热度指数：3071时间限制：C/C++ 1秒，其他语言2秒空间限制：C/C++ 32M，其他语言64M
算法知识视频讲解
牛牛举办了一次编程比赛,参加比赛的有3n个选手,每个选手都有一个水平值a_i.现在要将这些选手进行组队,一共组成n个队伍,即每个队伍3人.牛牛发现队伍的水平值等于该队伍队员中第二高水平值。
例如:
一个队伍三个队员的水平值分别是3,3,3.那么队伍的水平值是3
一个队伍三个队员的水平值分别是3,2,3.那么队伍的水平值是3
一个队伍三个队员的水平值分别是1,5,2.那么队伍的水平值是2
为了让比赛更有看点,牛牛想安排队伍使所有队伍的水平值总和最大。
如样例所示:
如果牛牛把6个队员划分到两个队伍
如果方案为:
team1:{1,2,5}, team2:{5,5,8}, 这时候水平值总和为7.
而如果方案为:
team1:{2,5,8}, team2:{1,5,5}, 这时候水平值总和为10.
没有比总和为10更大的方案,所以输出10.
输入描述:
输入的第一行为一个正整数n(1 ≤ n ≤ 10^5)
第二行包括3n个整数a_i(1 ≤ a_i ≤ 10^9),表示每个参赛选手的水平值.
输出描述:
输出一个整数表示所有队伍的水平值总和最大值.
示例1
输入
2
5 2 8 5 1 5
输出
10

题目解析
此题题意，这是一个求最优解的问题，三人一对，由首行n输入的值来确定队伍数目，我们为保证所有队伍的水平值总和为最大值，则需让队伍中第二大的值尽量大。所以将最大值放到最右边，最小是放左边.
解题思路
1.本题的主要思路是贪心算法，就是每次选值时都选当前能看到的局部最优解，所以这里的贪心就是保证每组的第二个值取到能选择的最大值就可以，我们每次尽量取最大，但每组最大的值在右边取不到，我们应该去找位于每组中间第二大的值。
2.排序，怎么使每组取到位于中间第二大的值，首先进行升序排序，一共有3*n个元素，前【0–n-1】个元素，肯定是数组中相较于后面，最小的值。将他们作为每组最小数，排在最左边，剩下的数两两一组且已经有序，通过数组下标进行查找，则将其每组两数中次大的数的相加即可得到整个题所有队伍的水平值总和最大值的最优解。其对应下标为然后取下标为3n - 2，3n - 4 ，3n - 4… n+2，n位置的元素累加即可。
读文字可能太绕，上图：

代码实现：
需要注意的点：
1.IO型接口可能会有多组测试用例，所以这里要持续接受输入多组测试用例：

while(cin>>n)
{
}
1
2
3
2.解题时需要用到算法库中的sort进行排序，需要加入算法库文件#include<algorithm>
3.解题时，有一个测试用例没过，我第一次求最优解时，定义的sum为int sum = 0
测试用例如下：

此时是因为int类型访问越界产生的问题，所以使用了范围更大的整形类型定义long long sum = 0,代码通过。
代码如下：

#include<iostream>
#include<vector>
#include<algorithm>
using namespace std;
int main()
{
    int n;
    while(cin>>n)  //首先输入队伍的个数，每队有三人
    {
        vector<int> array;//定义数组
        array.resize(3*n);//给这个数组开空间
        for(int i = 0;i < (3*n);i++)//循环输入数据
        {
            cin>>array[i];
        }
        long long  sum = 0;//sum存放每队水平最优解之和，此题的解
        sort(array.begin(),array.end());
        //将数组中元素进行升序，有序后【0-n-1】这n个数作为每队中的最小值，剩余的数两两一组，去第一个做中间值，
        for(int i = n;i <= 3 * n - 2;i+=2)
        {
            sum += array[i];
        }
        cout<<sum<<endl;
    }
}
————————————————
版权声明：本文为CSDN博主「fighting QAQ」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。
原文链接：https://blog.csdn.net/qq_43676757/article/details/104842343
