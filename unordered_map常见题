961. 重复 N 次的元素
在大小为 2N 的数组 A 中有 N+1 个不同的元素，其中有一个元素重复了 N 次。

返回重复了 N 次的那个元素。

 

示例 1：

输入：[1,2,3,3]
输出：3
示例 2：

输入：[2,1,2,5,3,2]
输出：2
示例 3：

输入：[5,1,5,2,5,3,5,4]
输出：5
class Solution {
public:
    int repeatedNTimes(vector<int>& A) {
        unordered_map<int,int> m;
        int N = A.size() / 2;
        for(auto e : A)
        {
            m[e]++;
        }
        for(auto& e : m)
        {
            if(e.second == N)
            {
                return e.first;
            }
        }
        return 0;
    }
};
349. 两个数组的交集
给定两个数组，编写一个函数来计算它们的交集。

 

示例 1：

输入：nums1 = [1,2,2,1], nums2 = [2,2]
输出：[2]
示例 2：

输入：nums1 = [4,9,5], nums2 = [9,4,9,8,4]
输出：[9,4]
 
class Solution {
public:
    vector<int> intersection(vector<int>& nums1, vector<int>& nums2) {
        unordered_map<int,int> m1;
        unordered_map<int,int> m2;
        vector<int> ret;
        for(auto e : nums1)
        {
            m1[e]++;
        }  
         for(auto e : nums2)
        {
            m2[e]++;
        } 
        for(auto& e : m2)
        {
            for(auto& b : m1)
            {
                if(e.first == b.first)
                {
                    ret.push_back(e.first);
                }
            }
        }
        return ret;
    }
};
350. 两个数组的交集 II
给定两个数组，编写一个函数来计算它们的交集。

 

示例 1：

输入：nums1 = [1,2,2,1], nums2 = [2,2]
输出：[2,2]
示例 2:

输入：nums1 = [4,9,5], nums2 = [9,4,9,8,4]
输出：[4,9]
 

说明：

输出结果中每个元素出现的次数，应与元素在两个数组中出现次数的最小值一致。
我们可以不考虑输出结果的顺序。
class Solution {
public:
    vector<int> intersect(vector<int>& nums1, vector<int>& nums2) {
        unordered_map<int,int> m1;
        if(nums1.size() > nums2.size())
            return intersect(nums2,nums1);
        vector<int> ret;
        for(auto e : nums1)
        {
            m1[e]++;
        }  
        for(auto& e : nums2)
        {
            if(m1.count(e))
            {
                ret.push_back(e);
                m1[e]--;
                if(m1[e] == 0)
                    m1.erase(e);            }
        }
        return ret;
    }
};
217. 存在重复元素
给定一个整数数组，判断是否存在重复元素。

如果任意一值在数组中出现至少两次，函数返回 true 。如果数组中每个元素都不相同，则返回 false 。

 

示例 1:

输入: [1,2,3,1]
输出: true
示例 2:

输入: [1,2,3,4]
输出: false
示例 3:

输入: [1,1,1,3,3,4,3,2,4,2]
输出: true
class Solution {
public:
    bool containsDuplicate(vector<int>& nums) {
        map<int,int> m;
        for(auto e : nums)
        {
            m[e]++;
        }
        for(auto e : m)
        {
            if(e.second >= 2)
            {
                return true;
            }
        }
        return false;
    }
};
884. 两句话中的不常见单词
给定两个句子 A 和 B 。 （句子是一串由空格分隔的单词。每个单词仅由小写字母组成。）

如果一个单词在其中一个句子中只出现一次，在另一个句子中却没有出现，那么这个单词就是不常见的。

返回所有不常用单词的列表。

您可以按任何顺序返回列表。

 

示例 1：

输入：A = "this apple is sweet", B = "this apple is sour"
输出：["sweet","sour"]
示例 2：

输入：A = "apple apple", B = "banana"
输出：["banana"]
class Solution {
public:
    vector<string> uncommonFromSentences(string A, string B) {
        unordered_map<string,int> m;
        vector<string> ret;
        string str;
        A = A + ' ' + B;
        for(int i = 0;i <= A.size();i++)
        {
            if(A[i] != ' ' && i != A.size())
            {
                str += A[i];
            }
            else
            {
                m[str]++;
                str.clear();
            }
        }
        for(auto& e : m)
        {
            if(e.second == 1)
            {
                ret.push_back(e.first);
            }
        }
        return ret;
    }
};
