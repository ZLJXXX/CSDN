八大经典排序（二）
原创famur 最后发布于2020-03-27 15:25:08 阅读数 4  收藏
展开
直接选择排序:
在元素集合array[i]–array[n-1]中选择关键码最大(小)的数据元素
若它不是这组元素中的最后一个(第一个)元素，则将它与这组元素中的最后一个（第一个）元素交换在剩余的array[i]–array[n-2]（array[i+1]–array[n-1]）集合中，重复上述步骤，直到集合剩余1个元素

实现代码：

void SelectSort(int *parray, int n)
{
	int begin = 0, end = n - 1;
	while (begin < end)//数组比较已经到中间位置已经确定了数组最大值最小值
	{
		for (int i = begin; i <= end; i++)//当前数组没有确定的数组元素下标
		{
			if (parray[i] > parray[end])
			{
				Swap(&parray[i], &parray[end]);
			}
			else if (parray[i] < parray[begin])
			{
				Swap(&parray[i], &parray[begin]);
			}
		}
		begin++, end--;//确定后下此数组的下标减少
	}
}

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
直接选择排序的特性总结：

直接选择排序思考非常好理解，但是效率不是很好。实际中很少使用
时间复杂度：O(N^2)
空间复杂度：O(1)
稳定性：不稳定
堆排序
堆排序(Heapsort)是指利用堆积树（堆）这种数据结构所设计的一种排序算法，它是选择排序的一种。它是通过堆来进行选择数据。需要注意的是排升序要建大堆，排降序建小堆。

重复继续调整结果为


实现代码：

void AdjustHeapSort(int *a, int n, int parent)//向下调整算法
{
	assert(a);
	int child = parent * 2 + 1;//左孩子
	int temp = 0;
	while (child < n)
	{
		if ((child + 1 < n) && a[child + 1] > a[child])//判断右孩子是否大于左孩子
		{
			++child;
		}
		if (a[child]>a[parent])//将大的孩子与父亲交换
		{
			Swap(&a[child], &a[parent]);

			parent = child;
			child = parent * 2 + 1;
		}
		else
		{
			break;
		}
	}
}

void HeapSort(int *a, int n)
{
	assert(a);

	//建大堆
	for (int i = (n - 2) / 2; i >= 0; i--)
	{
		AdjustHeapSort(a, n, i);
	}

	//选数
	int end = n - 1;
	while (end>0)
	{

		Swap(&a[end], &a[0]);

		AdjustHeapSort(a, end, 0);
		end--;
	}
}


1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
直接选择排序的特性总结：

堆排序使用堆来选数，效率就高了很多。
时间复杂度：O(N*logN)
空间复杂度：O(1)
稳定性：不稳定
冒泡排序

实现代码：
两两比较相邻记录的关键字，如果反序则交换，直到没有反序的记录为止。冒泡的实现在细节上可以很多种变化，我们就最简单的一种冒泡实现代码，来讲解冒泡排序的思想。

void BubbleSort(int *parray, int n)
{
	int i = 0, t = 0;
	int flag = 0;
	for (i = 0; i < n; i++)
	{
		for (t = 1; t < n; t++)
		{
			if (parray[t - 1]>parray[t])
			{
				int p = 0;
				p = parray[t];
				parray[t] = parray[t - 1];
				parray[t - 1] = p;
				flag = 1;
			}

		}
		if (flag == 0)
		{
			break;
		}
	}
}
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
冒泡排序的特性总结：

冒泡排序是一种非常容易理解的排序
时间复杂度：O(N^2)
空间复杂度：O(1)
稳定性：稳定
————————————————
版权声明：本文为CSDN博主「famur」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。
原文链接：https://blog.csdn.net/famur/article/details/105141504
